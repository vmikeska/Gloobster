@using System.Threading.Tasks
@using Gloobster.Portal.Controllers.Portal
@using Gloobster.Portal.ViewModels
@model Gloobster.Portal.ViewModels.ViewModelTripDetail

<script type="text/javascript" src="@Url.Content("~/js/Views/TripDetailView.js")"></script>
<script type="text/javascript" src="@Url.Content("~/js/Trip/Comments.js")"></script>
<script type="text/javascript" src="@Url.Content("~/js/Trip/Files.js")"></script>
<script type="text/javascript" src="@Url.Content("~/js/Trip/Planner.js")"></script>


<section class="line margin padding">
	<div class="wrapper">
		<div class="table margin width100">
			<div class="cell middle">
				<input id="nameInput" class="heading middle" type="text" placeholder="Edit this" value="@Model.Name">
				<a class="button border mleft10" href="#">Add photo</a>
					<input id="photoInput" type="file"  />
			</div>
			<div class="cell middle tright">
				<a class="button border popup-target" data-target="#popup-share" href="#">Share trip</a>
					<a class="button border" href="/Trip/Overview/@Model.TripId">See view</a>
				<a class="icon-wheel blue middle mleft20" href="#">Settings</a>
			</div>
		</div>

		@*<p class="color1">My Own Personal trip Description that I can write and edit anytime. This text would be used as default copy for sharing and for any other off site interaction so be careful. In the future it could have a feature allowing theme photo being pre-generated and possibly replaced by my photo of choice.</p>*@
			<textarea class="color1" style="width: 900px;" id="description" placeholder="write trip description...">@Model.Description</textarea>

		<h3>Day by Day Plan</h3>
		<div id="plannerCont1" class="daybyday table margin">
			@*<div class="cell">
				<div class="destination">Prague</div>
				<div class="timeline">22.6.</div>
				<div class="timeline green">V Praze je blaze ...</div>
			</div>
			<div class="cell">
				<div class="transport">
					<span class="icon-plane"></span>
				</div>
				<div class="timeline green falldown"></div>
			</div>
			<div class="cell">
				<div class="destination active">
					Frankfurt
					<span class="tab">arrival Mon 23.6.</span>
				</div>
				<div class="timeline green"></div>
				<div class="timeline">4.5.</div>
			</div>
			<div class="cell">
				<div class="transport active">
					<span class="icon-train"></span>
					<span class="tab"></span>
				</div>
				<div class="timeline"></div>
			</div>
			<div class="cell">
				<div class="destination">Vienna</div>
				<div class="timeline"></div>
				<div class="timeline green">1.1.</div>
			</div>
			<div class="cell">
				<div class="transport">
					<span class="icon-boat"></span>
				</div>
				<div class="timeline green">22.6.</div>
			</div>
			<div class="cell">
				<div class="destination">New York</div>
				<div class="timeline green"></div>
				<div class="timeline">25.10.</div>
			</div>
			<div class="cell">
				<div class="transport">
					<span class="icon-bike"></span>
				</div>
				<div class="timeline"></div>
			</div>*@
		</div>

			@*@{await Html.RenderPartialAsync("PlaceDetail"); }*@
		
		<div class="daybyday table margin">
			<div class="cell">
				<div class="destination">Brno</div>
				<div class="timeline"></div>
				<div class="timeline green">25.10.</div>
			</div>
			<div class="cell">
				<div class="transport">
					<span class="icon-car"></span>
				</div>
				<div class="timeline green"></div>
			</div>
			<div class="cell">
				<div class="destination active2">
					Frankfurt
					<span class="tab">arrival Mon 23.6.</span>
				</div>
				<div class="timeline green">22.6.</div>
			</div>
			<div class="cell">
				<div class="transport">
					<span class="icon-plane"></span>
				</div>
				<div class="timeline green"></div>
			</div>
			<div class="cell">
				<div class="destination orange">Budapest</div>
				<div class="timeline green"></div>
				<div class="timeline">22.6.</div>
			</div>
			<div class="cell">
				<div class="transport orange">
					<span class="icon-walk"></span>
				</div>
				<div class="timeline"></div>
			</div>
			<div class="cell">
				<div class="destination orange">Graz</div>
				<div class="timeline"></div>
				<div class="timeline green">30.7.</div>
			</div>
			<div class="cell">
				<a id="addPlace" class="create" href="#"></a>
			</div>
		</div>

		@{await Html.RenderPartialAsync("TravelDetail"); }
	</div>
</section>

@*@Html.Partial("Comments")*@

@Html.Partial("Files")

@*@Html.Partial("Participants")*@

<section class="wrapper margin3">
	<div class="table row margin">
		<div class="cell">
			<h3 class="margin0">Notes</h3>
		</div>
		<div class="cell bottom">
			<input id="public" type="checkbox" @(Model.NotesPublic ? "checked='checked'" : string.Empty)>
			<label class="color1" for="public">Public</label>
		</div>
	</div>
	<textarea class="color1" style="width: 900px;" id="notes" placeholder="write your simple notes...">@Model.Notes</textarea>
	@*<p class="color1">My Own Personal trip Description that I can write and edit anytime. This text would be used as default copy for sharing and for any other off site interaction so be careful. In the future it could have a feature allowing theme photo being pre-generated and possibly replaced by my photo of choice.</p>*@
</section>


@Html.Partial("ShareDialog")
@Html.Partial("ConfirmDeleteDialog")

@Html.Partial("Templates")
@Html.Partial("PlannerTemplates")




<script>
	function onBodyLoad() {
		currentView = new TripDetailView();
		var urlParams = window.location.pathname.split("/");
		var id = urlParams[urlParams.length - 1];

		currentView.initialize(id);
		onShareDialogLoad(currentView);
	}

	var nameDelayedCallback = new DelayedCallback("nameInput");
	nameDelayedCallback.callback = (name) => {
		var data = { propertyName: "Name", values: { id: currentView.trip.tripId, name: name } };
		currentView.apiPut("tripProperty", data, function() {

		});
	}

	var descriptionDelayedCallback = new DelayedCallback("description");
	descriptionDelayedCallback.callback = (description) => {
		var data = { propertyName: "Description", values: { id: currentView.trip.tripId, description: description } };
			currentView.apiPut("tripProperty", data, function () {

			});
	}

	var descriptionDelayedCallback = new DelayedCallback("notes");
	descriptionDelayedCallback.callback = (notes) => {
		var data = { propertyName: "Notes", values: { id: currentView.trip.tripId, notes: notes } };
			currentView.apiPut("tripProperty", data, function () {

			});
	}

	$("#public").change((e) => {
			var isPublic = $(e.target).prop("checked");
			var data = { propertyName: "NotesPublic", values: { id: currentView.trip.tripId, isPublic: isPublic } };
			currentView.apiPut("tripProperty", data, function () {

			});
	});



</script>