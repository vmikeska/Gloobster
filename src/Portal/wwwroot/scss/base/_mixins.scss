/* Size */

@mixin size-minmax($size, $type: min) {
    $width: nth($size, 1);
    $height: $width;
    @if length($size) > 1 {
        $height: nth($size, 2);
    }
    @if is-size($height) {
        #{$type}-height: $height;
    } @else {
        @warn "`#{$height}` is not a valid length for the `$height` parameter in the `size-minmax` mixin.";
    }
    @if is-size($width) {
        #{$type}-width: $width;
    } @else {
        @warn "`#{$width}` is not a valid length for the `$width` parameter in the `size-minmax` mixin.";
    }
}

@mixin size-border($size, $border: 1px, $including: true) {
    $border: if($including, -2 * $border, 2 * $border);
    $width: nth($size, 1);
    $height: $width;
    @if length($size) > 1 {
        $height: nth($size, 2);
    }
    @if is-size($height) {
        height: $height + $border;
    } @else {
        @warn "`#{$height}` is not a valid length for the `$height` parameter in the `size-border` mixin.";
    }
    @if is-size($width) {
        width: $width + $border;
    } @else {
        @warn "`#{$width}` is not a valid length for the `$width` parameter in the `size-border` mixin.";
    }
}

/* Grid */

@mixin grid($wrapper, $width, $margin, $total: 0, $type: margin) {
    $width: nth($width, 1);
    @if $total == 0 {
        $wrapper: nth($wrapper, 1);
        $total: floor($wrapper / $width);
        @if ($total * $width) + (($total - 1) * $margin) > $wrapper {
            $total: $total - 1;
        }
    }
    #{$type}-right: $margin;
    #{$type}-top: $margin;
    @if $total > 0 {
        @for $i from 1 through $total {
            &:nth-child(#{$i}) {
                #{$type}-top: 0 !important;
            }
        }
        &:nth-child(#{$total}n), &:last-child {
            #{$type}-right: 0;
        }
    }
}

@mixin cell($parents: null) {
    //$tags: "& > .cell, & > .col, & > li";
    $tags: "& > .cell, & > li";
    @if $parents == null {
        #{$tags} {
            @content;
        }
    } @else {
        #{$parents} {
            #{$tags} {
                @content;
            }
        }
    }
}

/* Responsive */

@mixin desktop {
    @media screen and (max-width: $desktop) {
        @content;
    }
}

@mixin desktop-only {
    @media screen and (max-width: $desktop) and (min-width: $tablet + 1) {
        @content;
    }
}

@mixin desktop-over {
    @media screen and (min-width: $desktop + 1) {
        @content;
    }
}

@mixin tablet {
    @media screen and (max-width: $tablet) {
        @content;
    }
}

@mixin tablet-only {
    @media screen and (max-width: $tablet) and (min-width: $mobile + 1) {
        @content;
    }
}

@mixin tablet-over {
    @media screen and (min-width: $tablet + 1) {
        @content;
    }
}

@mixin mobile {
    @media screen and (max-width: $mobile) {
        @content;
    }
}

@mixin mobile-over {
    @media screen and (min-width: $mobile + 1) {
        @content;
    }
}